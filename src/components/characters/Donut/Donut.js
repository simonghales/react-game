// Auto-generated by https://github.com/react-spring/gltfjsx

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

const donutMaterial = new THREE.MeshStandardMaterial({
  color: 0xe7bd81
})

donutMaterial.skinning = true

const frostingMaterial = new THREE.MeshStandardMaterial({
  color: 0xe74e9b
})

frostingMaterial.skinning = true

const yellowMaterial = new THREE.MeshStandardMaterial({
  color: 0xe7b152
})

yellowMaterial.skinning = true

const greenMaterial = new THREE.MeshStandardMaterial({
  color: 0x519b85
})

greenMaterial.skinning = true

const blueMaterial = new THREE.MeshStandardMaterial({
  color: 0x7381e7
})

blueMaterial.skinning = true

const whiteMaterial = new THREE.MeshStandardMaterial({
  color: 0xffffff
})

whiteMaterial.skinning = true

const blackMaterial = new THREE.MeshStandardMaterial({
  color: 0x000000
})

blackMaterial.skinning = true

console.log('donutMaterial', donutMaterial)

export default function Donut({ walking, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, '/Donut.glb')

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      DONUT_Defeat: mixer.clipAction(animations[0], group.current),
      DONUT_Defeat_2: mixer.clipAction(animations[1], group.current),
      DONUT_Idle: mixer.clipAction(animations[2], group.current),
      DONUT_Run: mixer.clipAction(animations[3], group.current),
      DONUT_Victory: mixer.clipAction(animations[4], group.current),
      DONUT_Victory_2: mixer.clipAction(animations[5], group.current),
      DONUT_Walking: mixer.clipAction(animations[6], group.current)
    }
    return () => animations.forEach(clip => mixer.uncacheClip(clip))
  }, [])

  useEffect(() => {
    mixer.stopAllAction()
    if (walking) {
      actions.current.DONUT_Walking.play()
    } else {
      actions.current.DONUT_Idle.play()
    }
  }, [walking])

  return (
    <group ref={group} position={[0, 0, 0]} {...props} dispose={null}>
      <scene name="Scene">
        <group name="HumanArmature" scale={[0.8, 0.8, 0.8]}>
          <primitive object={nodes.Bone} />
          <group name="Donut">
            <skinnedMesh
              receiveShadow
              castShadow
              material={donutMaterial}
              geometry={nodes.Torus_0.geometry}
              skeleton={nodes.Torus_0.skeleton}
              name="Torus_0"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={frostingMaterial}
              geometry={nodes.Torus_1.geometry}
              skeleton={nodes.Torus_1.skeleton}
              name="Torus_1"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={yellowMaterial}
              geometry={nodes.Torus_2.geometry}
              skeleton={nodes.Torus_2.skeleton}
              name="Torus_2"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={greenMaterial}
              geometry={nodes.Torus_3.geometry}
              skeleton={nodes.Torus_3.skeleton}
              name="Torus_3"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={blueMaterial}
              geometry={nodes.Torus_4.geometry}
              skeleton={nodes.Torus_4.skeleton}
              name="Torus_4"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={blackMaterial}
              geometry={nodes.Torus_5.geometry}
              skeleton={nodes.Torus_5.skeleton}
              name="Torus_5"
            />
            <skinnedMesh
              receiveShadow
              castShadow
              material={whiteMaterial}
              geometry={nodes.Torus_6.geometry}
              skeleton={nodes.Torus_6.skeleton}
              name="Torus_6"
            />
          </group>
        </group>
      </scene>
    </group>
  )
}
